{"version":3,"sources":["components/Box.js","components/Panel.js","components/Player.js","components/ButtonFAIcon.js","constants/gameStateConst.js","components/Game.js","index.js"],"names":["Box","_this$props","this","props","value","highlighted","onClick","playerClass","concat","react_default","a","createElement","className","classnames","React","Component","defaultProps","Panel","winningLine","boxes","Object","toConsumableArray","Array","map","e","i","includes","Box_Box","key","Player","playerRef","playerActive","totalScore","styleDisplayActive","display","style","defultProps","ButtonFAIcon","label","extraClasses","iconClass","gameStateConst","PLAYING","WINNER","DRAW","Game","state","moves","fill","xIsNext","moveNum","totalWinsPlayerX","totalWinsPlayerY","gameState","slice","current","length","setState","winnerCombination","calculateWinner","winner","updateTotalScores","playerOMovesHandler","_this$state","performMovementByPermutation","emptyBoxesPos","filter","handleClick","_","sample","ms","start","Date","getTime","end","player","possibleWinningMove","newGame","_i","_winningCombinations","currentCombination","_currentCombination","slicedToArray","pos1","pos2","pos3","playerTurnClass","status","draw","_this2","_this$state2","nextPlayer","intro","Player_Player","Panel_Panel","ButtonFAIcon_ButtonFAIcon","resetScores","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.35877f6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Box extends React.Component {\r\n  render() {\r\n    const { value, highlighted, onClick } = this.props;\r\n    const playerClass = value ? `player-${value}` : '';\r\n    return (\r\n      <button\r\n        className={classnames(\r\n          'box-wrapper',\r\n          'float-left',\r\n          'text-center',\r\n          playerClass,\r\n          {\r\n            highlighted: highlighted\r\n          }\r\n        )}\r\n        onClick={onClick}\r\n      >\r\n        {value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nBox.defaultProps = {\r\n  highlighted: false\r\n};\r\n\r\nBox.propTypes = {\r\n  value: PropTypes.string,\r\n  highlighted: PropTypes.bool,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n","import React from 'react';\r\nimport Box from './Box';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Panel extends React.Component {\r\n  render() {\r\n    const { winningLine, boxes, onClick } = this.props;\r\n    return (\r\n      <div className=\"panel-inner-container\">\r\n        {[...Array(9)].map((e, i) => {\r\n          let highlighted = false;\r\n          if (winningLine && winningLine.includes(i)) {\r\n            highlighted = true;\r\n          }\r\n          return (\r\n            <Box\r\n              key={i}\r\n              value={boxes[i]}\r\n              highlighted={highlighted}\r\n              onClick={() => onClick(i)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPanel.propTypes = {\r\n  winningLine: PropTypes.array,\r\n  boxes: PropTypes.array.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Player extends React.Component {\r\n  render() {\r\n    const { playerRef, playerActive, totalScore } = this.props;\r\n\r\n    const styleDisplayActive = playerActive\r\n      ? { display: 'inline-block' }\r\n      : { display: 'none' };\r\n\r\n    return (\r\n      <div className=\"player-inner-container\">\r\n        <div className=\"title-wrapper\">\r\n          <h3 className=\"player-title display-4\">\r\n            {`Player ${playerRef} `}\r\n            <span style={styleDisplayActive} className=\"player-active\">\r\n              {' '}\r\n              *\r\n            </span>\r\n          </h3>\r\n        </div>\r\n        <p className=\"total-score lead\">\r\n          Total Score: <span className=\"score\">{totalScore}</span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPlayer.defultProps = {\r\n  totalScore: 0\r\n};\r\n\r\nPlayer.propTypes = {\r\n  playerRef: PropTypes.string.isRequired,\r\n  playerActive: PropTypes.bool,\r\n  totalScore: PropTypes.number\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nexport default class ButtonFAIcon extends React.Component {\r\n  render() {\r\n    const { onClick, label, extraClasses, iconClass } = this.props;\r\n\r\n    return (\r\n      <div className=\"button-fa-container\">\r\n        <button onClick={onClick} className={classnames('btn', extraClasses)}>\r\n          {iconClass && <i className={classnames('fas', iconClass)} />}\r\n          <span className=\"button-label\">{label}</span>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nButtonFAIcon.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  extraClasses: PropTypes.string,\r\n  iconClass: PropTypes.string\r\n};\r\n","export const gameStateConst = {\r\n  PLAYING: 'PLAYING',\r\n  WINNER: 'WINNER',\r\n  DRAW: 'DRAW'\r\n};\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport Panel from './Panel';\r\nimport Player from './Player';\r\nimport ButtonFAIcon from './ButtonFAIcon';\r\nimport { gameStateConst } from '../constants/gameStateConst';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport _ from 'lodash';\r\n\r\nexport default class Game extends React.Component {\r\n  state = {\r\n    // Array of movements. Each move has an inner array with the state of the boxes\r\n    moves: [\r\n      {\r\n        boxes: Array(9).fill(null)\r\n      }\r\n    ],\r\n\r\n    // Controls the next turn:\r\n    xIsNext: true,\r\n\r\n    // Number of moves. Used to navigate back and forward between moves\r\n    moveNum: 0,\r\n\r\n    totalWinsPlayerX: 0,\r\n    totalWinsPlayerY: 0,\r\n    gameState: gameStateConst.PLAYING\r\n  };\r\n\r\n  handleClick(i) {\r\n    // Get a copy of the movements in the position number selected (if navigating between them ) or in the las position (last move).\r\n    const moves = this.state.moves.slice(0, this.state.moveNum + 1);\r\n\r\n    // The last position is the desire to store the current move\r\n    const current = moves[moves.length - 1];\r\n\r\n    // Using slice() to create a copy of the boxes inner array\r\n    const boxes = current.boxes.slice();\r\n\r\n    const gameState = this.state.gameState;\r\n    if (boxes[i] || gameStateConst.WINNER === gameState) return;\r\n\r\n    // Switch between players markups\r\n    boxes[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n    this.setState({\r\n      moves: moves.concat([\r\n        {\r\n          boxes\r\n        }\r\n      ]),\r\n      xIsNext: !this.state.xIsNext,\r\n      moveNum: moves.length\r\n    });\r\n\r\n    const winnerCombination = this.calculateWinner(boxes);\r\n    if (winnerCombination) {\r\n      const winner = current.boxes[winnerCombination[0]];\r\n\r\n      // Update total scores\r\n      this.updateTotalScores(winner);\r\n    } else {\r\n      if (this.state.moveNum === 8) {\r\n        this.setState({\r\n          gameState: gameStateConst.DRAW\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.playerOMovesHandler();\r\n  }\r\n  playerOMovesHandler() {\r\n    const { moves, moveNum, gameState, xIsNext } = this.state;\r\n\r\n    let resultOfPermutation;\r\n\r\n    if (!xIsNext && gameState === gameStateConst.PLAYING) {\r\n      this.setState({\r\n        xIsNext: false\r\n      });\r\n      const boxes = moves[moveNum].boxes;\r\n\r\n      // 1st - for each empty box, try out if 'player O' has a possible Winning move.\r\n      resultOfPermutation = this.performMovementByPermutation('O', boxes);\r\n      if (resultOfPermutation) return;\r\n\r\n      // 2nd - for each empty box, try out if 'player O' can avoid the other player to win.\r\n      resultOfPermutation = this.performMovementByPermutation('X', boxes);\r\n      if (resultOfPermutation) return;\r\n\r\n      // 3er - Just random\r\n      const emptyBoxesPos = boxes\r\n        .map((e, i) => (e === null ? i : null))\r\n        .filter(e => e !== null);\r\n      this.handleClick(_.sample(emptyBoxesPos));\r\n    }\r\n  }\r\n\r\n  wait(ms) {\r\n    var start = new Date().getTime();\r\n    var end = start;\r\n    while (end < start + ms) {\r\n      end = new Date().getTime();\r\n    }\r\n  }\r\n\r\n  performMovementByPermutation(player, boxes) {\r\n    for (let i = 0; i < boxes.length; i++) {\r\n      let box = boxes[i];\r\n      if (!box) {\r\n        boxes[i] = player;\r\n        const possibleWinningMove = this.calculateWinner(boxes);\r\n        boxes[i] = null;\r\n        if (possibleWinningMove) {\r\n          this.handleClick(i);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  newGame() {\r\n    this.setState({\r\n      moves: [\r\n        {\r\n          boxes: Array(9).fill(null)\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      moveNum: 0,\r\n      gameState: gameStateConst.PLAYING\r\n    });\r\n  }\r\n\r\n  resetScores() {\r\n    this.setState({\r\n      totalWinsPlayerX: 0,\r\n      totalWinsPlayerY: 0\r\n    });\r\n\r\n    this.newGame();\r\n  }\r\n\r\n  calculateWinner(boxes) {\r\n    // Array with possible combination for winning the game\r\n    const winningCombinations = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n\r\n    for (let currentCombination of winningCombinations) {\r\n      const [pos1, pos2, pos3] = currentCombination;\r\n      if (\r\n        boxes[pos1] &&\r\n        boxes[pos1] === boxes[pos2] &&\r\n        boxes[pos2] === boxes[pos3]\r\n      ) {\r\n        return currentCombination;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  updateTotalScores(winner) {\r\n    if ('X' === winner) {\r\n      this.setState({\r\n        totalWinsPlayerX: this.state.totalWinsPlayerX + 1,\r\n        totalWinsPlayerY: this.state.totalWinsPlayerY\r\n      });\r\n    } else {\r\n      this.setState({\r\n        totalWinsPlayerX: this.state.totalWinsPlayerX,\r\n        totalWinsPlayerY: this.state.totalWinsPlayerY + 1\r\n      });\r\n    }\r\n    this.setState({\r\n      gameState: gameStateConst.WINNER\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      moves,\r\n      moveNum,\r\n      totalWinsPlayerX,\r\n      totalWinsPlayerY,\r\n      gameState,\r\n      xIsNext\r\n    } = this.state;\r\n    const current = moves[moveNum];\r\n\r\n    // grab the winning line if there is a winner\r\n    const winnerCombination = this.calculateWinner(current.boxes);\r\n\r\n    const nextPlayer = xIsNext ? 'X' : 'O';\r\n\r\n    let winner, playerTurnClass, status, draw;\r\n    if (winnerCombination) {\r\n      // Get the winner by using the first possition of the winning line\r\n      winner = current.boxes[winnerCombination[0]];\r\n\r\n      // There is a winner\r\n      status = {\r\n        intro: 'Winner: ',\r\n        player: winner\r\n      };\r\n    } else {\r\n      // There is NOT a winner.\r\n\r\n      // Draw game ?\r\n      if (gameStateConst.DRAW === gameState) {\r\n        draw = true;\r\n        status = {\r\n          intro: 'Game Draw',\r\n          player: ''\r\n        };\r\n      } else {\r\n        // Show which player moves next\r\n        status = {\r\n          intro: 'Next Turn: ',\r\n          player: nextPlayer\r\n        };\r\n\r\n        playerTurnClass = `player-${nextPlayer}`;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          'main-container',\r\n          { draw: draw },\r\n          { winner: winner },\r\n          `winner-player-${winner}`,\r\n          playerTurnClass\r\n        )}\r\n      >\r\n        <div className=\"hero-container\">\r\n          <div className=\"container title-container\">\r\n            <h2 className=\"next-turn-indicator text-center\">\r\n              {status.intro}\r\n              <span className=\"player-turn font-italic\">\r\n                {status.player && ` Player ${status.player}`}\r\n              </span>\r\n            </h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"game-container pt-5\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"player-container col-md-3\">\r\n                <Player\r\n                  playerRef=\"X\"\r\n                  playerActive={xIsNext}\r\n                  totalScore={totalWinsPlayerX}\r\n                />\r\n              </div>\r\n              <div className=\"panel-container col-md-6\">\r\n                <Panel\r\n                  boxes={current.boxes}\r\n                  onClick={i => this.handleClick(i)}\r\n                  winningLine={winnerCombination}\r\n                />\r\n              </div>\r\n              <div className=\"player-container col-md-3\">\r\n                <Player\r\n                  playerRef=\"O\"\r\n                  playerActive={!xIsNext}\r\n                  totalScore={totalWinsPlayerY}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"new-game-container text-center my-5\">\r\n              <ButtonFAIcon\r\n                onClick={() => this.newGame()}\r\n                extraClasses=\"btn-primary\"\r\n                label=\"New Game\"\r\n                iconClass=\"fa-plus mr-3\"\r\n              />\r\n            </div>\r\n            <div className=\"reset-scores-container text-center my-5\">\r\n              <ButtonFAIcon\r\n                onClick={() => this.resetScores()}\r\n                extraClasses=\"btn-danger\"\r\n                label=\"Reset Scores\"\r\n                iconClass=\"fa-power-off mr-3\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.scss';\r\nimport Game from './components/Game';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n"],"sourceRoot":""}